# -*- coding: utf-8 -*-
"""DataExploration.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_YuzwobHW8yj6_KPeW5iB_y893wgxCd4

# Preliminary Items

## Imports
"""

import os
import pandas as pd

"""Enable colab pandas interactive displays"""

# Commented out IPython magic to ensure Python compatibility.
from google.colab import data_table
# %load_ext google.colab.data_table

"""## Mount Google Drive """

# Commented out IPython magic to ensure Python compatibility.
currentWorkingDir = !pwd
defaultWorkingDir = "/content"

if ( currentWorkingDir[0] == defaultWorkingDir ):
  from google.colab import drive

  drive.mount('/content/drive')
      
#   %cd "/content/drive/My Drive/Colab Notebooks/stock_portfolio"
else:
  print("Currenting running app from: ")
  !pwd

"""# Data Understanding and Data Preparation

## Data Dictionary

|Column|Description|
|:-----|:----------|
|Symbol|Abbreviation assigned to a security|
|Date| Date that the security was traded|
|52_Week_High/52_Week_Low| Highest/lowest price at which a security has traded during the time period |
||that equates to one year. It is calculated based on the closing price for the security.|
|Previous_Year_Div/Current_Year_Div|Dividends paid out (per share) in the previous/current calendar year|
|Volume_non_block|Total stock units traded that are not block trades (block trade involves a significantly large number of equities or bonds being traded at an arranged price between two parties)|
|Today_High/Today_Low|Highest/Lowest price traded for the day|
|Last_Traded/Close_Price|Price stock traded for in the last trade done before trading stopped for the day.|
||_NB: The last price and the closing price are usually the same thing. If they vary, the closing price should be used as it refers to the last 'on market' traded price._|
|| _After the market closes, brokers have a half hour window during which they can transact last minute orders and report the deal on the trading screen._|
|Price_Change|The difference between the close price the stock traded on the previous day and the current close price .|
|Closing_Bid|The bidding price at the end of the trading day (price buyers are willing to pay for the security)|
|Closing_Ask|The asking price at the end of the trading day (from sellers)|

### Sources: 

(1) General

https://www.jamstockex.com/wp-content/uploads/2014/12/A-Guide-to-Jamaica-Securities-Markets.pdf

(2) Close price/last traded price

http://www.sharechat.co.nz/article/7eeb4aa0/what-is-the-difference-between-last-price-and-closing-price.html#:~:text=A%3A%20The%20last%20price%20and,deal%20on%20the%20trading%20screen.
"""



"""## Data Dictionary

|Column|Description|Treatment of Blank/NULL Values|
|:-----|:----------|:-----------------------------|
|Symbol|Abbreviation assigned to a security|Drop rows|
|Date| Date that the security was traded|Drop rows|
|52_Week_High/52_Week_Low| Highest/lowest price at which a security has traded during the time period ||
||that equates to one year. It is calculated based on the closing price for the security.|No action.|


|Previous_Year_Div/Current_Year_Div|Dividends paid out (per share) in the previous/current calendar year|
|Volume_non_block|Total stock units traded that are not block trades (block trade involves a significantly large number of equities or bonds being traded at an arranged price between two parties)|
|Today_High/Today_Low|Highest/Lowest price traded for the day|
|Last_Traded/Close_Price|Price stock traded for in the last trade done before trading stopped for the day.|
||_NB: The last price and the closing price are usually the same thing. If they vary, the closing price should be used as it refers to the last 'on market' traded price._|
|| _After the market closes, brokers have a half hour window during which they can transact last minute orders and report the deal on the trading screen._|
|Price_Change|The difference between the close price the stock traded on the previous day and the current close price .|
|Closing_Bid|The bidding price at the end of the trading day (price buyers are willing to pay for the security)|
|Closing_Ask|The asking price at the end of the trading day (from sellers)|

### Sources: 

(1) General

https://www.jamstockex.com/wp-content/uploads/2014/12/A-Guide-to-Jamaica-Securities-Markets.pdf

(2) Close price/last traded price

http://www.sharechat.co.nz/article/7eeb4aa0/what-is-the-difference-between-last-price-and-closing-price.html#:~:text=A%3A%20The%20last%20price%20and,deal%20on%20the%20trading%20screen.

## Overview of Data - Pre cleaning
"""

df_price_history = pd.read_csv("price-history.csv")

"""View Dataframe"""

df_price_history

"""View data transposed (Columns as rows and vice versa)"""

df_price_history.T

"""View number of rows and columns"""

df_price_history.shape

"""View column data types"""

df_price_history.dtypes

"""## Clean Data

### Non numerical fields

#### Column: Symbol

Determine Unique Stock Symbols
"""

len(df_price_history['Symbol'].unique())

for s in df_price_history['Symbol'].unique():
  print (s)

"""Filter dataset for companies listed as at 31-Dec-2020"""

df_listed_companies = pd.read_csv("listed_companies.csv",usecols=[1],header=0)

len(df_listed_companies)

df_listed_companies

"""View data to be retained"""

df_price_history[df_price_history['Symbol'].isin(df_listed_companies.Symbol)]

"""Perform the filter"""

index_names = df_price_history[~df_price_history['Symbol'].isin(df_listed_companies.Symbol)].index

df_price_history.drop(index_names,inplace=True)

"""Verify the change"""

len(df_price_history)

df_price_history

"""Convert from "Object" to "String""""

df_price_history["Symbol"] = df_price_history["Symbol"].astype("string")

df_price_history.Symbol.dtypes

df_price_history.dtypes

"""#### Column: Date

Convert to DateTime
"""

df_price_history["Date"] = pd.to_datetime(df_price_history["Date"],format="%d/%m/%Y")

df_price_history

df_price_history.dtypes

"""Check for NULL values"""

df_price_history["Date"].isna().sum()

"""Check if date values are within scope range"""

df_price_history["Date"].min()

df_price_history["Date"].max()

"""### Numerical Fields

##### Drop rows were no trades were done for that day

###### Overview of numeric data (N/A, 0 and negative value counts) before cleaning
"""

df_price_history.describe(datetime_is_numeric=False)

"""Check numeric columns for N/A values"""

df_price_history.isna().sum()

"""Check for columns with "0" as value"""

(df_price_history == 0).sum()

"""Check for columns that have a negative value"""

(df_price_history.loc[:,df_price_history.columns[2:]] < 0).sum()

"""###### Define criteria for removal

This is defined as all following features having 0 or NULL value:


1. Volume_non_block
2. Today_High
3. Today_Low
4. Price Change

View NULL Value count
"""

df_price_history.isna().sum()

"""View 0 value count"""

(df_price_history == 0).sum()

"""Create series (list/array of rows) that indicates (True/False) the rows where no trades were done for a particular day"""

criteria_series = (
                    (
                        (df_price_history["Volume_non_block"].isna() ) | (df_price_history["Volume_non_block"] == 0)
                    ) &
                    (
                        (df_price_history["Today_High"].isna() )       | (df_price_history["Today_High"] == 0)
                    ) &
                    (
                        (df_price_history["Today_Low"].isna() )        | (df_price_history["Today_Low"] == 0)
                    )
                  )

criteria_series

"""Determine the number rows that will be dropped"""

criteria_series[criteria_series == True].count()

"""Create the index of the rows to be dropped, then dataframe for viewing"""

not_traded_idx = df_price_history[criteria_series].index

not_traded_idx

df_price_history_nt_traded = df_price_history.loc[not_traded_idx,["Symbol","Date","Volume_non_block","Today_High","Today_Low","Price_Change"]]

"""View rows to drop"""

data_table.DataTable(df_price_history_nt_traded, include_index=False, num_rows_per_page=10, max_rows=40000)

"""Determine no of resulting rows after drop operation then perform drop"""

len(df_price_history) - len(df_price_history_nt_traded)

df_price_history.drop(not_traded_idx,inplace=True)

"""Verify change"""

len(df_price_history)

df_price_history

"""###### Overview of numeric data after first cleaning"""

df_price_history.isna().sum()

"""#### Clean columns that have N/A values

##### Column: 52_Week_High/52_Week_Low

View N/A values in column
"""

df_price_history.isna().sum()

df_price_history[
                  (df_price_history["52_Week_High"].isna() ) | (df_price_history["52_Week_Low"].isna() )
                ]

"""Impute to zero"""

df_price_history["52_Week_High"] = df_price_history["52_Week_High"].fillna(0)

df_price_history["52_Week_Low"] = df_price_history["52_Week_Low"].fillna(0)

"""Confirm change"""

df_price_history.isna().sum()

"""##### Column: Previous_Year_Div/Current_Year_Div

View N/A values in column
"""

df_price_history.isna().sum()

df_price_history[
                  (df_price_history["Previous_Year_Div"].isna() ) | (df_price_history["Current_Year_Div"].isna() )
                ]

"""Impute to zero"""

df_price_history["Previous_Year_Div"] = df_price_history["Previous_Year_Div"].fillna(0)

df_price_history["Current_Year_Div"] = df_price_history["Current_Year_Div"].fillna(0)

"""Confirm change"""

df_price_history.isna().sum()

"""##### Column: Close_Price

View N/A values in column
"""

df_price_history.isna().sum()

df_price_history[
                  (df_price_history["Close_Price"].isna() ) | (df_price_history["Close_Price"].isna() )
                ]

"""Save rows to drop"""

close_price_idx = df_price_history[
                                      (df_price_history["Close_Price"].isna() ) | (df_price_history["Close_Price"].isna() )
                                  ].index

"""Drop row as no trades were done for that day"""

len(df_price_history)

df_price_history.drop(close_price_idx,axis=0,inplace=True)

"""Confirm change"""

len(df_price_history)

"""##### Column: Price_Change

View N/A values in column
"""

df_price_history.isna().sum()

df_price_history[ df_price_history["Price_Change"].isna() ]

"""Save rows to impute to zero"""

price_change_idx = df_price_history[ df_price_history["Price_Change"].isna() ].index

price_change_idx

"""Impute rows to zero (0) as price change is 0%"""

df_price_history.isna().sum()

df_price_history.loc[price_change_idx,["Price_Change"]] = 0

"""Verify the change"""

df_price_history.loc[price_change_idx,:]["Price_Change"]

df_price_history.isna().sum()

"""##### Column: Closing_Bid/Closing_Ask

View N/A values in column
"""

df_price_history.isna().sum()

df_price_history[
                  (df_price_history["Closing_Bid"].isna() ) | (df_price_history["Closing_Ask"].isna() )
                ]

"""Impute to zero"""

df_price_history["Closing_Bid"] = df_price_history["Closing_Bid"].fillna(0)

df_price_history["Closing_Ask"] = df_price_history["Closing_Ask"].fillna(0)

"""Confirm change"""

df_price_history.isna().sum()

"""##### Overview of numeric data after second cleaning

###### Check numeric columns for N/A values
"""

df_price_history.isna().sum()

"""###### Check for columns with "0" as value"""

(df_price_history == 0).sum()

"""###### Check for columns that have a negative value"""

(df_price_history.loc[:,df_price_history.columns[2:]] < 0).sum()

"""####Clean columns that have zero values (if necessary)

###### Overview
"""

(df_price_history == 0).sum()

"""##### Column: 52_Week_High/52_Week_Low"""

df_price_history[ 
                  (df_price_history['52_Week_High'] == 0) | (df_price_history['52_Week_Low'] == 0)
                ]

"""No futher action as those stocks IPOed  and would not have 52 Week High or lows

##### Column Previous_Year_Div/Current_Year_Div

Zero values in these columns are expected as not all companies pay dividends. No further action requuired.
"""

(df_price_history == 0).sum()

"""###### Column: Volume_non_block

These indicate that all the transactions done for the day were block transactions as the Today_High/Today_Low fields are populated but the Volume_non_block is at zero. 

No action is required.
"""

df_price_history[df_price_history['Volume_non_block'] == 0]

"""###### Column: Today_High/Low, Last_Traded and Close_Price

Note that these columns have non zero values, which is expected.

No action required.

###### Column: Price_Change
"""

(df_price_history == 0).sum()

df_price_history[df_price_history['Price_Change'] == 0]

"""###### Column: Closing_Ask/Closing_Bid

For these columns, having zero values is expected as it indicates that no unmatched bids/asks were present at end of day.
"""

(df_price_history == 0).sum()

df_price_history[
                 (df_price_history['Closing_Bid'] == 0) | (df_price_history['Closing_Ask'] == 0)
                ]

"""#### Clean columns that have negative values (if necessary)

###### Overview

Only price_change has negative values. This is reasonable, no further action required.
"""

(df_price_history.loc[:,df_price_history.columns[2:]] < 0).sum()

"""## Construct Data: Derived Attributes

### Create field "Date of earliest trade"

This field will be used to filter stocks that had an IPO in the scope period and thus would not have a four full years of data.
"""

df_price_history["Earliest_Trade_Date"] = df_price_history.groupby("Symbol")["Date"].transform("min")

df_price_history

df_price_history["Earliest_Trade_Date"].describe(datetime_is_numeric=True)

"""### Create field: "Has_Closing_Bid", "Has_Closing_Ask"

## View overall statistics
"""

df_price_history.dtypes

df_price_history.describe()

df_price_history["Date"].describe(datetime_is_numeric=True)

df_price_history["Earliest_Trade_Date"].describe(datetime_is_numeric=True)

"""## Set Index to "Date" and "Symbol""""

df_price_history=df_price_history.set_index(["Symbol","Date"])

df_price_history.index

df_price_history.index.values

len(df_price_history.index.unique(level="Symbol"))

len(df_price_history.index.unique(level="Date"))

df_price_history

"""## Save to csv"""

df_price_history.to_csv("df_price_history.csv")